{"version":3,"sources":["../src/main.ts"],"names":["createHandler","options","storage","Storage","sourceBucket","sourceBucketPath","sourcePathPrefix","cacheBucket","cacheBucketPath","cachePathPrefix","bucket","cacheControl","cacheControlInitial","mergedParams","params","Object","keys","reduce","acc","key","handleRequest","req","res","path","decodeURIComponent","source","target","transforms","targetPath","sourcePath","sourceFile","file","createReadStream","decompress","on","noop","x","statusCode","set","headers","etag","pipe","end","stream","err","out","targetFile","createWriteStream","contentType","console","error","status","send","statusMessage","resume"],"mappings":";;;;;;;AAKA;;AAEA;;AACA;;AACA;;AACA;;;;;;;;;;;;;;;;;;;;AAIO,SAASA,aAAT,CAAuBC,OAAvB,EAAyD;AAC9D,MAAMC,OAAO,GAAG,IAAIC,gBAAJ,CAAYF,OAAO,CAACC,OAApB,CAAhB;;AAD8D,qBAGjB,wBAC3CD,OAAO,CAACG,YADmC,CAHiB;AAAA;AAAA,MAGvDC,gBAHuD;AAAA,MAGrCC,gBAHqC;;AAAA,sBAOnB,wBAAYL,OAAO,CAACM,WAApB,CAPmB;AAAA;AAAA,MAOvDC,eAPuD;AAAA,MAOtCC,eAPsC;;AAS9D,MAAML,YAAY,GAAGF,OAAO,CAACQ,MAAR,CAAeL,gBAAf,CAArB;AACA,MAAME,WAAW,GAAGL,OAAO,CAACQ,MAAR,CAAeF,eAAf,CAApB;AAEA,MAAMG,YAAY,GAAG,qCAArB;AACA,MAAMC,mBAAmB,GAAG,iDAA5B;AAEA,MAAMC,YAAY,GAAGZ,OAAO,CAACa,MAAR,mCAEZA,cAFY,GAGZC,MAAM,CAACC,IAAP,CAAYf,OAAO,CAACa,MAApB,EAA4BG,MAA5B,CACD,UAACC,GAAD,EAAMC,GAAN;AAAA;;AAAA,2CACKD,GADL,2BAEGC,GAFH,kCAGOL,eAAOK,GAAP,CAHP,sBAIOlB,OAAO,CAACa,MAJf,oDAIO,gBAAiBK,GAAjB,CAJP;AAAA,GADC,EAQD,EARC,CAHY,IAcjBL,cAdJ;AAgBA,SAAO,SAASM,aAAT,CAAuBC,GAAvB,EAA4BC,GAA5B,EAAiC;AACtC,QAAMC,IAAI,GAAGC,kBAAkB,CAACH,GAAG,CAACE,IAAL,CAA/B;;AADsC,wBAEC,yBAAaA,IAAb,EAAmBV,YAAnB,CAFD;AAAA,QAE9BY,MAF8B,iBAE9BA,MAF8B;AAAA,QAEtBC,MAFsB,iBAEtBA,MAFsB;AAAA,QAEdC,UAFc,iBAEdA,UAFc;;AAItC,QAAMC,UAAU,GAAGnB,eAAe,GAAGiB,MAArC;AAEA,QAAMG,UAAU,GAAGvB,gBAAgB,GAAGmB,MAAtC;AAEA,QAAMK,UAAU,GAAGJ,MAAM,GACrBnB,WAAW,CAACwB,IAAZ,CAAiBH,UAAjB,CADqB,GAErBxB,YAAY,CAAC2B,IAAb,CAAkBF,UAAlB,CAFJ;AAIAC,IAAAA,UAAU,CACPE,gBADH,CACoB;AAAEC,MAAAA,UAAU,EAAE;AAAd,KADpB,EAEGC,EAFH,CAEM,OAFN,EAEeC,WAFf,EAGGD,EAHH,CAGM,UAHN,EAGkB,UAAmCE,CAAnC,EAAsC;AACpD,UAAIA,CAAC,CAACC,UAAF,KAAiB,GAArB,EAA0B;AACxBf,QAAAA,GAAG,CAACgB,GAAJ,CAAQ,cAAR,EAAwBF,CAAC,CAACG,OAAF,CAAU,cAAV,CAAxB;AACAjB,QAAAA,GAAG,CAACgB,GAAJ,CAAQ,eAAR,EAAyB3B,YAAzB;AACAW,QAAAA,GAAG,CAACgB,GAAJ,CAAQ,MAAR,EAAgBF,CAAC,CAACG,OAAF,CAAUC,IAA1B;AACA,aAAKC,IAAL,CAAUnB,GAAV;AACD,OALD,MAKO,IAAIc,CAAC,CAACC,UAAF,KAAiB,GAArB,EAA0B;AAC/B,aAAKK,GAAL;AACAtC,QAAAA,YAAY,CACT2B,IADH,CACQF,UADR,EAEGG,gBAFH,GAGGE,EAHH,CAGM,OAHN,EAGeC,WAHf,EAIGD,EAJH,CAIM,UAJN,EAIkB,UAAmCE,CAAnC,EAAsC;AACpD,cAAIA,CAAC,CAACC,UAAF,KAAiB,GAArB,EAA0B;AACxBf,YAAAA,GAAG,CAACgB,GAAJ,CAAQ,eAAR,EAAyB1B,mBAAzB;AACA,sCAAU,IAAV,EAAgBe,UAAhB,EAA4BgB,MAA5B,CAAmC,UAACC,GAAD,EAAMC,GAAN,EAAc;AAC/C,kBAAID,GAAJ,EAAS;AACP,wCAAYtB,GAAZ,EAAiBsB,GAAjB;AACD,eAFD,MAEO;AACL,oBAAME,UAAU,GAAGvC,WAAW,CAC3BwB,IADgB,CACXH,UADW,EAEhBmB,iBAFgB,CAEE;AACjBC,kBAAAA,WAAW,EAAEZ,CAAC,CAACG,OAAF,CAAU,cAAV;AADI,iBAFF,EAKhBL,EALgB,CAKb,OALa,EAKJ,UAACU,GAAD,EAAS;AACpBK,kBAAAA,OAAO,CAACC,KAAR,CAAcN,GAAd;AACD,iBAPgB,CAAnB;AAQAC,gBAAAA,GAAG,CAACJ,IAAJ,CAASK,UAAT;AACAD,gBAAAA,GAAG,CAACJ,IAAJ,CAASnB,GAAT;AACD;AACF,aAfD;AAgBD,WAlBD,MAkBO;AACL,iBAAKoB,GAAL,CAAS,YAAM;AACbpB,cAAAA,GAAG,CAAC6B,MAAJ,CAAWf,CAAC,CAACC,UAAb;AACAf,cAAAA,GAAG,CAAC8B,IAAJ,CAAShB,CAAC,CAACiB,aAAX;AACD,aAHD;AAID;AACF,SA7BH,EA8BGC,MA9BH;AA+BD,OAjCM,MAiCA;AACL,aAAKZ,GAAL,CAAS,YAAM;AACbpB,UAAAA,GAAG,CAAC6B,MAAJ,CAAWf,CAAC,CAACC,UAAb;AACAf,UAAAA,GAAG,CAACoB,GAAJ,CAAQN,CAAC,CAACiB,aAAV;AACD,SAHD;AAID;AACF,KAhDH,EAiDGC,MAjDH;AAkDD,GA9DD;AA+DD","sourcesContent":["/**\n * Copyright (c) 2020-present Kriasoft | MIT License (https://git.io/JUgVL)\n */\n\nimport { RequestHandler } from \"express\";\nimport { Storage } from \"@google-cloud/storage\";\n\nimport { params } from \"./params\";\nimport { parseUrlPath, parseBucket } from \"./parse\";\nimport { transform } from \"./transform\";\nimport { handleError, noop } from \"./utils\";\nimport type { Options, Params } from \"./types\";\nexport type { Options, Params } from \"./types\";\n\nexport function createHandler(options: Options): RequestHandler {\n  const storage = new Storage(options.storage);\n\n  const [sourceBucketPath, sourcePathPrefix] = parseBucket(\n    options.sourceBucket,\n  );\n\n  const [cacheBucketPath, cachePathPrefix] = parseBucket(options.cacheBucket);\n\n  const sourceBucket = storage.bucket(sourceBucketPath);\n  const cacheBucket = storage.bucket(cacheBucketPath);\n\n  const cacheControl = \"public, max-age=31560000, immutable\";\n  const cacheControlInitial = \"public, max-age=31560000, s-maxage=0, immutable\";\n\n  const mergedParams = options.params\n    ? {\n        ...params,\n        ...Object.keys(options.params).reduce<Params>(\n          (acc, key) => ({\n            ...acc,\n            [key]: {\n              ...params[key as keyof Params],\n              ...options.params?.[key as keyof Params],\n            },\n          }),\n          {},\n        ),\n      }\n    : params;\n\n  return function handleRequest(req, res) {\n    const path = decodeURIComponent(req.path);\n    const { source, target, transforms } = parseUrlPath(path, mergedParams);\n\n    const targetPath = cachePathPrefix + target;\n\n    const sourcePath = sourcePathPrefix + source;\n\n    const sourceFile = target\n      ? cacheBucket.file(targetPath)\n      : sourceBucket.file(sourcePath);\n\n    sourceFile\n      .createReadStream({ decompress: false })\n      .on(\"error\", noop)\n      .on(\"response\", function (this: NodeJS.ReadStream, x) {\n        if (x.statusCode === 200) {\n          res.set(\"Content-Type\", x.headers[\"content-type\"]);\n          res.set(\"Cache-Control\", cacheControl);\n          res.set(\"etag\", x.headers.etag);\n          this.pipe(res);\n        } else if (x.statusCode === 404) {\n          this.end();\n          sourceBucket\n            .file(sourcePath)\n            .createReadStream()\n            .on(\"error\", noop)\n            .on(\"response\", function (this: NodeJS.ReadStream, x) {\n              if (x.statusCode === 200) {\n                res.set(\"Cache-Control\", cacheControlInitial);\n                transform(this, transforms).stream((err, out) => {\n                  if (err) {\n                    handleError(res, err);\n                  } else {\n                    const targetFile = cacheBucket\n                      .file(targetPath as string)\n                      .createWriteStream({\n                        contentType: x.headers[\"content-type\"],\n                      })\n                      .on(\"error\", (err) => {\n                        console.error(err);\n                      });\n                    out.pipe(targetFile);\n                    out.pipe(res);\n                  }\n                });\n              } else {\n                this.end(() => {\n                  res.status(x.statusCode);\n                  res.send(x.statusMessage);\n                });\n              }\n            })\n            .resume();\n        } else {\n          this.end(() => {\n            res.status(x.statusCode);\n            res.end(x.statusMessage);\n          });\n        }\n      })\n      .resume();\n  };\n}\n"],"file":"main.js"}